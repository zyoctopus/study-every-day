/**
 * 函数式编程：最简单的话来说，函数式编程就是将函数作为另外一个函数的参数或者返回值；用函数的方式进行思考和编码。
 * 如何理解函数是一等公民？JavaScript所有你可以对其他类型例如对象，字符串，或者数字进行的操作，你都可以对function进行。（这里的操作指的是可以有属性，可以赋值给一个变量，可以放在数组里作为元素，可以作为其他对象的属性，什么都可以做）
 */

/**
 * 什么是高阶函数？
 * 1、有个错误定义：以函数作为参数的函数，结果返回一个函数
 * 2、正确的：只要满足参数或返回值为函数就可以成为高阶函数，而非要同时满足才成立
 *
 * 例如：
 * 1、平常使用的Map、Reduce、Filter等以函数作为参数的，但是不返回一个函数；
 * 2、connect 方法，函数作为参数，并且返回一个函数；
 * 3、有回调函数的函数；
 * 4、柯里化：把本来接收多个参数的函数改成了逐个接收单一参数的函数；
 * 都属于高阶函数
 */

// 以map为例,生成一个新数组，其每个元素皆是之前数组的两倍

// 不使用高阶函数--------

const arr1 = [1, 2, 3, 4];
const arr2 = [];
for (let i = 0; i < arr1.length; i++) {
  arr2.push(arr1[i] * 2);
}

console.log(arr2);
// [2, 4, 6, 8]
console.log(arr1);
// [1, 2, 3, 4]

// 使用高阶-----------
const arr1 = [1, 2, 3, 4];
const arr2 = arr1.map((item) => item * 2);

console.log(arr2);
// [2, 4, 6, 8]
console.log(arr1);
// [1, 2, 3, 4]

// 思考下
["1", "2", "3"].map(parseInt); 
// [1,NaN,NaN]

["1","2","3"].map((x)=>{
  return parseInt(x);
}); 
// [1,2,3]
// 以上两者的不同
